{"version":3,"file":"components-Menu-Menu-stories-mdx.146dae14.iframe.bundle.js","mappings":";;AA8BA;AACA;AAIA;AAGA;AACA;AACA;AAIA;AAQA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AAGA;AACA;;AAMA;AACA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;AAGA;;;;AAIA;;;AAGA;;;AAMA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;;;AAMA;;;;AAIA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;AC7LA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;AACA;AAGA;AACA;AAGA;AACA;AAWA;AAPA;AAGA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA;;AClEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAQA;;ACtBA;;AAEA;;;;;;;;;ACMA;;;;AAIA;;;;;AAKA;;AAEA;;AAEA;;;;;;;;;AASA;;;;;AAKA;AACA;AACA;;;;;;;;;;AAUA;;;AAKA;;;ACnDA;AACA;;AAIA","sources":["webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/components/Menu/MenuList/MenuDrawer.tsx","webpack://@lokalise/louis/./src/components/Menu/MenuList/styles.ts","webpack://@lokalise/louis/./src/components/Menu/MenuItem/styles.ts","webpack://@lokalise/louis/./src/components/Menu/MenuDivider/index.ts"],"sourcesContent":["import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n    size: Size;\n    variant: ButtonVariant;\n    appearance: Appearance;\n    active: boolean;\n    disabled: boolean;\n    isLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n    const colorCodes = {\n        default: 'primary',\n        primary: 'primary',\n        danger: 'red',\n        warning: 'yellow',\n    } as const;\n\n    return colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover', appearance: Appearance, transparent = false) => {\n    if (appearance === 'default') {\n        return css`\n            background-color: transparent;\n            color: ${color('content.primary')};\n            border-color: ${color('content.primary')};\n        `;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n        color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n    `;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n    if (appearance === 'default') {\n        return undefined;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        color: ${color(`content.${colorCode}`)};\n\n        &:hover:not([disabled]):not([aria-expanded='true']) {\n            background-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            color: ${color(`content.${colorCode}`)};\n        }\n\n        &:active:not([disabled]) {\n            background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n        }\n\n        ${modifier(\n            'active',\n            css`\n                background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n                border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            `,\n        )}\n    `;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        default: css<ButtonProps>`\n            background-color: ${color(`content.white`)};\n            color: ${color('primary.400')};\n            border-color: transparent;\n\n            &:hover:not([disabled]):not([aria-expanded='true']) {\n                color: ${color('primary.500')};\n            }\n        `,\n        primary: css<ButtonProps>`\n            ${getColorStyles('primary', 'white')}\n        `,\n        warning: css<ButtonProps>`\n            ${getColorStyles('warning', 'black')}\n        `,\n        danger: css<ButtonProps>`\n            ${getColorStyles('danger', 'white')}\n        `,\n    })}\n\n    ${variants('variant', {\n        solid: css``,\n        outline: css<ButtonProps>`\n            border-width: 1px;\n            ${({ appearance }) => css`\n                ${getOutlineStyles('idle', appearance, true)}\n\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n                    ${getOutlineStyles('hover', appearance, true)}\n                }\n\n                &:active:not([disabled]) {\n                    ${getOutlineStyles('hover', appearance)}\n                }\n\n                ${modifier('active', getOutlineStyles('hover', appearance))}\n            `}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    border: 1px solid transparent;\n    text-decoration: none;\n    vertical-align: middle;\n    border-radius: ${radius('md')};\n    cursor: pointer;\n    position: relative;\n    transition: all ${transitionTime()};\n    box-sizing: border-box;\n    font-family: ${fontFamily('default')};\n\n    ${variants('size', {\n        xs: css`\n            font-size: 11px;\n            padding: ${spacing(0, 2)};\n            height: 20px;\n            line-height: 12px;\n        `,\n        sm: css`\n            font-size: 12px;\n            padding: ${spacing(0, 3)};\n            height: 30px;\n            line-height: 12px;\n        `,\n        md: css`\n            font-size: 14px;\n            padding: ${spacing(0, 3)};\n            height: 35px;\n            line-height: 14px;\n        `,\n        lg: css`\n            font-size: 18px;\n            padding: ${spacing(0, 4)};\n            height: 45px;\n            line-height: 18px;\n        `,\n    })}\n\n    ${variantColorStyles}\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${color('surface.secondary')};\n        color: ${color('content.disabled')};\n        border-color: ${color('content.disabled')};\n\n        ${modifier('isLoading', variantColorStyles)}\n    }\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n\n    ${variants('size', {\n        xs: css`\n            gap: ${spacing(1)};\n        `,\n        sm: css`\n            gap: ${spacing(2)};\n        `,\n        md: css`\n            gap: ${spacing(2)};\n        `,\n        lg: css`\n            gap: ${spacing(2)};\n        `,\n    })}\n\n    ${modifier(\n        'isHidden',\n        css`\n            opacity: 0;\n        `,\n    )}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n    position: relative;\n    align-items: center;\n    display: inline-flex;\n    white-space: nowrap;\n\n    ${variants('size', {\n        xs: css`\n            top: 0;\n        `,\n        sm: css`\n            top: -1px; // Make text visually centered\n        `,\n        md: css`\n            top: -1px; // Make text visually centered\n        `,\n        lg: css`\n            top: -1px; // Make text visually centered\n        `,\n    })}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n    font-size: 1.3em;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n","import type { StyledProps } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type Color = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: Color;\n    fill?: Color;\n    stroke?: Color;\n    size?: string;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: Color | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const Path = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Rect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const G = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Circle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const LinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Defs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Stop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const ClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n","import { css, styled } from '../../../utils/styled';\nimport { color, modifier, radius, spacing, zIndex } from '../../../utils/theme';\n\nexport type MenuDrawerProps = {\n    /**\n     * Toggles full width rendering of the MenuDrawer.\n     * */\n    fullWidth?: boolean;\n};\n\nexport const MenuDrawer = styled.div<MenuDrawerProps>`\n    background-color: ${color('background.primary')};\n    padding: ${spacing(1, 0)};\n    width: max-content;\n    border-radius: ${radius('md')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n\n    ${modifier(\n        'fullWidth',\n        css`\n            width: 100%;\n        `,\n    )}\n`;\n\nMenuDrawer.displayName = 'MenuDrawer';\n","import { css, styled } from '../../../utils/styled';\nimport { modifier, zIndex } from '../../../utils/theme';\n\nexport const Container = styled.div<{ fullWidth: boolean }>`\n    width: max-content;\n    z-index: ${zIndex('popover')};\n\n    ${modifier(\n        'fullWidth',\n        css`\n            width: 100%;\n        `,\n    )}\n\n    &&&&:focus {\n        outline: none !important;\n    }\n`;\n","import { DoneIcon } from '../../../foundations/icons';\nimport { styled } from '../../../utils/styled';\nimport { color, fontFamily, spacing } from '../../../utils/theme';\n\nexport const StyledDoneIcon = styled(DoneIcon)`\n    margin-right: 4px;\n`;\n\n/**\n * Set default node for this element as \"div\". This is useful for cases when this component is used as a standalone\n * component. There could be a cases where it is nested inside a button element or a button element is nested\n * in it - in that cases there are DOM node validation errors. In case the user wants to turn it into accessible\n * component it is possible to user \"role\" attribute */\nexport const MenuItemContainer = styled.div`\n    box-sizing: border-box;\n    min-width: 0;\n    line-height: 18px;\n    font-family: ${fontFamily('default')};\n    font-weight: normal;\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    padding: ${spacing(2, 3)};\n    font-size: 13px;\n    color: ${color('content.primary')};\n    cursor: pointer;\n    fill: ${color('content.primary')};\n    position: relative;\n    border: 0;\n    background: none;\n    width: 100%;\n    text-decoration: none;\n\n    // Fixes specific bug. In case the MenuItem becomes an anchor and mouse is hovered over the item and the arrows are used to change the focus of the menu item.\n    &:hover:not([disabled]):not(:focus) {\n        color: ${color('content.primary')};\n    }\n\n    &:focus,\n    &:hover:not([disabled]):not([data-hover-disabled='true']) {\n        background-color: ${color('primary.500')};\n        color: ${color('content.white')};\n        fill: ${color('content.white')};\n    }\n\n    outline: none !important;\n    // Specificity wars. Solution is to delete all the \"outline: none;\" occurrences in the code. That would allow to get rid of !important inside outlineStyles.ts\n    &&&&:focus {\n        outline: none !important;\n    }\n\n    &:disabled {\n        color: ${color('content.disabled')};\n        cursor: not-allowed;\n    }\n`;\n\nMenuItemContainer.displayName = 'MenuItemContainer';\n","import { styled } from '../../../utils/styled';\nimport { color, spacing } from '../../../utils/theme';\n\nexport const MenuDivider = styled.hr`\n    display: block;\n    height: 1px;\n    background-color: ${color('border.primary')};\n    margin: ${spacing(1, 0)} !important; // Necessary to override #tasks.tab-pane hr\n    border: none;\n`;\n\nMenuDivider.displayName = 'MenuDivider';\n"],"names":[],"sourceRoot":""}