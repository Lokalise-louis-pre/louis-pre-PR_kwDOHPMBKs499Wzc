{"version":3,"file":"components-Pagination-Pagination-stories-mdx.4a8e2668.iframe.bundle.js","mappings":";;AA8BA;AACA;AAIA;AAGA;AACA;AACA;AAIA;AAQA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AAGA;AACA;;AAMA;AACA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;AAGA;;;;AAIA;;;AAGA;;;AAMA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;;;AAMA;;;;AAIA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;ACzNA;AACA;;;;AAIA;;;;AAIA;;;AAGA;;;AAGA;;;;;;;ACZA;;;;AAIA;AAGA;;AAIA;;AAIA;AACA;AACA;AACA;AAGA;;;AAGA;;;AAQA;AACA;AACA;;AAEA","sources":["webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/utils/styles/link.ts","webpack://@lokalise/louis/./src/components/Pagination/styles.ts"],"sourcesContent":["import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n    size: Size;\n    variant: ButtonVariant;\n    appearance: Appearance;\n    active: boolean;\n    disabled: boolean;\n    isLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n    const colorCodes = {\n        default: 'primary',\n        primary: 'primary',\n        danger: 'red',\n        warning: 'yellow',\n    } as const;\n\n    return colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover', appearance: Appearance, transparent = false) => {\n    if (appearance === 'default') {\n        return css`\n            background-color: transparent;\n            color: ${color('content.primary')};\n            border-color: ${color('content.primary')};\n        `;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n        color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n    `;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n    if (appearance === 'default') {\n        return undefined;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        color: ${color(`content.${colorCode}`)};\n\n        &:hover:not([disabled]):not([aria-expanded='true']) {\n            background-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            color: ${color(`content.${colorCode}`)};\n        }\n\n        &:active:not([disabled]) {\n            background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n        }\n\n        ${modifier(\n            'active',\n            css`\n                background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n                border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            `,\n        )}\n    `;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        default: css<ButtonProps>`\n            background-color: ${color(`content.white`)};\n            color: ${color('primary.400')};\n            border-color: transparent;\n\n            &:hover:not([disabled]):not([aria-expanded='true']) {\n                color: ${color('primary.500')};\n            }\n        `,\n        primary: css<ButtonProps>`\n            ${getColorStyles('primary', 'white')}\n        `,\n        warning: css<ButtonProps>`\n            ${getColorStyles('warning', 'black')}\n        `,\n        danger: css<ButtonProps>`\n            ${getColorStyles('danger', 'white')}\n        `,\n    })}\n\n    ${variants('variant', {\n        solid: css``,\n        outline: css<ButtonProps>`\n            border-width: 1px;\n            ${({ appearance }) => css`\n                ${getOutlineStyles('idle', appearance, true)}\n\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n                    ${getOutlineStyles('hover', appearance, true)}\n                }\n\n                &:active:not([disabled]) {\n                    ${getOutlineStyles('hover', appearance)}\n                }\n\n                ${modifier('active', getOutlineStyles('hover', appearance))}\n            `}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    border: 1px solid transparent;\n    text-decoration: none;\n    vertical-align: middle;\n    border-radius: ${radius('md')};\n    cursor: pointer;\n    position: relative;\n    transition: all ${transitionTime()};\n    box-sizing: border-box;\n    font-family: ${fontFamily('default')};\n\n    ${variants('size', {\n        xs: css`\n            font-size: 11px;\n            padding: ${spacing(0, 2)};\n            height: 20px;\n            line-height: 12px;\n        `,\n        sm: css`\n            font-size: 12px;\n            padding: ${spacing(0, 3)};\n            height: 30px;\n            line-height: 12px;\n        `,\n        md: css`\n            font-size: 14px;\n            padding: ${spacing(0, 3)};\n            height: 35px;\n            line-height: 14px;\n        `,\n        lg: css`\n            font-size: 18px;\n            padding: ${spacing(0, 4)};\n            height: 45px;\n            line-height: 18px;\n        `,\n    })}\n\n    ${variantColorStyles}\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${color('surface.secondary')};\n        color: ${color('content.disabled')};\n        border-color: ${color('content.disabled')};\n\n        ${modifier('isLoading', variantColorStyles)}\n    }\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n\n    ${variants('size', {\n        xs: css`\n            gap: ${spacing(1)};\n        `,\n        sm: css`\n            gap: ${spacing(2)};\n        `,\n        md: css`\n            gap: ${spacing(2)};\n        `,\n        lg: css`\n            gap: ${spacing(2)};\n        `,\n    })}\n\n    ${modifier(\n        'isHidden',\n        css`\n            opacity: 0;\n        `,\n    )}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n    position: relative;\n    align-items: center;\n    display: inline-flex;\n    white-space: nowrap;\n\n    ${variants('size', {\n        xs: css`\n            top: 0;\n        `,\n        sm: css`\n            top: -1px; // Make text visually centered\n        `,\n        md: css`\n            top: -1px; // Make text visually centered\n        `,\n        lg: css`\n            top: -1px; // Make text visually centered\n        `,\n    })}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n    font-size: 1.3em;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n","import { css } from '../styled';\nimport { color, fontFamily, transitionTime } from '../theme';\n\nexport const withLinkStyle = css`\n    cursor: pointer;\n    font-size: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n    color: ${color('interactive.primary.idle')};\n    transition: color ${transitionTime()};\n    background-color: transparent;\n    padding: 0;\n    border: none;\n    font-family: ${fontFamily('default')};\n\n    &:hover,\n    &:focus {\n        color: ${color('interactive.primary.hover')};\n    }\n    &:active {\n        color: ${color('interactive.primary.pressed')};\n    }\n    &:active:hover {\n        color: ${color('interactive.primary.pressedHover')};\n    }\n`;\n","import { css, styled } from '../../utils/styled';\nimport { withLinkStyle } from '../../utils/styles';\nimport { color, fontFamily, modifier, spacing, typography } from '../../utils/theme';\n\nexport const Container = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    font-family: ${fontFamily('default')};\n`;\n\nexport const InputWrapper = styled.div`\n    width: 55px;\n`;\n\nexport const SelectWrapper = styled.div`\n    width: 70px;\n`;\n\nexport const Text = styled.div`\n    ${typography('description')};\n    padding: ${spacing(2)};\n    color: ${color('content.primary')};\n`;\n\nexport const ButtonWrapper = styled.div<{ visible: boolean }>`\n    visibility: hidden;\n\n    ${modifier(\n        'visible',\n        css`\n            visibility: visible;\n        `,\n    )}\n`;\n\nexport const Anchor = styled.button`\n    ${typography('description')}\n    ${withLinkStyle};\n    border: none;\n    padding-left: ${spacing(2)};\n`;\n"],"names":[],"sourceRoot":""}