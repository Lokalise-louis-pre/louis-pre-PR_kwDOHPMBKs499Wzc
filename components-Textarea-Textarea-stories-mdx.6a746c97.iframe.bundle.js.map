{"version":3,"file":"components-Textarea-Textarea-stories-mdx.6a746c97.iframe.bundle.js","mappings":";AAIA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;ACsBA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;AACA;AAGA;AACA;AAGA;AACA;AAWA;AAPA;AAGA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA;;ACxEA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;;;AAKA;AAYA;;;;AAKA;;;AAGA;;;;;;AAOA;;;;;;;;AAlBA;AC5GA;AACA;AAGA;;;AAGA","sources":["webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts","webpack://@lokalise/louis/./src/components/Textarea/styles.ts"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n`;\n","import type { StyledProps } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type Color = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: Color;\n    fill?: Color;\n    stroke?: Color;\n    size?: string;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: Color | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const Path = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Rect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const G = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Circle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const LinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Defs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Stop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const ClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, fontFamily, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n    border-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n    color: ${color('content.disabled')};\n    background-color: ${color('surface.secondary')};\n    border-color: ${color('border.primary')};\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &:focus,\n    [data-dev-state='focus'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &::placeholder {\n        color: ${color('content.disabled')};\n    }\n`;\n\nexport const withInputDisabledModifier = css`\n    ${modifier('disabled', withInputDisabledStyle)}\n\n    &:disabled {\n        ${withInputDisabledStyle}\n    }\n`;\n\nexport interface InputStyleProps {\n    error?: boolean;\n    disabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n    box-sizing: border-box;\n\n    ${typography('description')};\n\n    width: 100%;\n    color: ${color('content.primary')};\n    border: 1px solid ${color('border.primary')};\n    border-radius: ${radius('md')};\n    transition: border-color ease-in-out 0.15s;\n    padding: ${spacing(2, 3)};\n    background-color: ${color('background.input')};\n\n    @media (prefers-reduced-motion: reduce) {\n        transition: none;\n    }\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('primary.300')};\n    }\n\n    &:focus-within,\n    [data-dev-state='focus'] & {\n        border-color: ${color('primary.500')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n    box-sizing: content-box;\n    -webkit-font-smoothing: subpixel-antialiased;\n\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n    color: ${color('content.primary')};\n    background: none;\n\n    &&&:focus,\n    &&&:focus-visible,\n    [data-dev-state='focus'] &&& {\n        outline: none !important;\n    }\n\n    &::placeholder {\n        ${typography('description')};\n        color: ${color('content.secondary')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport const withInputStyle = css<InputStyleProps>`\n    ${withInputContainerStyle};\n    ${withInputFieldStyle};\n\n    // Unfortunately, we need order of container -> input, but we need certain props from container\n    // so we override those here. Currently I don't see way to combine those styles cleaner.\n    box-sizing: border-box;\n    background: ${color('background.input')};\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n    variants('inputSize', sizeStyles, 'default');\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n    small: css`\n        height: 28px;\n        min-height: 28px;\n        line-height: 28px;\n        ${typography('caption1')};\n\n        &::placeholder {\n            ${typography('caption1')}\n        }\n\n        &::-moz-placeholder {\n            line-height: 28px;\n        }\n    `,\n    default: css`\n        height: 33px;\n        min-height: 33px;\n        line-height: 33px;\n\n        &::-moz-placeholder {\n            line-height: 33px;\n        }\n    `,\n});\n","import { styled } from '../../utils/styled';\nimport type { InputStyleProps } from '../../utils/styles';\nimport { withInputStyle } from '../../utils/styles';\nimport { spacing } from '../../utils/theme';\n\nexport const Textarea = styled.textarea<InputStyleProps>`\n    ${withInputStyle};\n    padding: ${spacing(3)};\n`;\n\nexport const Container = styled.div`\n    width: 100%;\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: minmax(50px, 1fr); /* This ensures Textarea doesn't overflow 100% */\n`;\n"],"names":[],"sourceRoot":""}